{"version":3,"sources":["Effects.js","App.js","index.js"],"names":["extend","EffectComposer","ShaderPass","SavePass","RenderPass","triColorMix","uniforms","tDiffuse1","value","tDiffuse2","tDiffuse3","vertexShader","fragmentShader","Effects","composer","useRef","savePass","blendPass","swap","_useThree","useThree","scene","gl","size","camera","_useMemo","useMemo","rtA","THREE","width","height","rtB","useEffect","current","setSize","useFrame","delay1","delay2","renderTarget","texture","render","pixelRatio","getPixelRatio","_jsxs","ref","args","children","_jsx","attachArray","needsSwap","FXAAShader","CopyShader","roundedSquareWave","t","delta","a","f","Math","PI","atan","sin","Dots","vec","transform","positions","_toConsumableArray","Array","map","_","i","position","x","y","floor","random","right","distances","pos","length","cos","angleTo","_ref","clock","dist","elapsedTime","wave","copy","multiplyScalar","setPosition","setMatrixAt","instanceMatrix","needsUpdate","App","Canvas","orthographic","zoom","colorManagement","attach","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8e5a6ef2.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport React, { useMemo, useEffect, useRef } from 'react'\r\nimport { useThree, useFrame, extend } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\n\r\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\r\n\r\n// Shader that composites the r,g,b channels of 3 textures, respectively\r\nconst triColorMix = {\r\n  uniforms: {\r\n    tDiffuse1: { value: null },\r\n    tDiffuse2: { value: null },\r\n    tDiffuse3: { value: null }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    varying vec2 vUv;\r\n    uniform sampler2D tDiffuse1;\r\n    uniform sampler2D tDiffuse2;\r\n    uniform sampler2D tDiffuse3;\r\n    \r\n    void main() {\r\n      vec4 del0 = texture2D(tDiffuse1, vUv);\r\n      vec4 del1 = texture2D(tDiffuse2, vUv);\r\n      vec4 del2 = texture2D(tDiffuse3, vUv);\r\n      float alpha = min(min(del0.a, del1.a), del2.a);\r\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\r\n    }\r\n  `\r\n}\r\n\r\nexport function Effects() {\r\n  const composer = useRef()\r\n  const savePass = useRef()\r\n  const blendPass = useRef()\r\n  const swap = useRef(false) // Whether to swap the delay buffers\r\n  const { scene, gl, size, camera } = useThree()\r\n  const { rtA, rtB } = useMemo(() => {\r\n    const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    return { rtA, rtB }\r\n  }, [size])\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    // Swap render targets and update dependencies\r\n    let delay1 = swap.current ? rtB : rtA\r\n    let delay2 = swap.current ? rtA : rtB\r\n    savePass.current.renderTarget = delay2\r\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture\r\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture\r\n    swap.current = !swap.current\r\n    composer.current.render()\r\n  }, 1)\r\n  const pixelRatio = gl.getPixelRatio()\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={blendPass} args={[triColorMix, 'tDiffuse1']} needsSwap={false} />\r\n      <savePass attachArray=\"passes\" ref={savePass} needsSwap={true} />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        uniforms-resolution-value-x={1 / (size.width * pixelRatio)}\r\n        uniforms-resolution-value-y={1 / (size.height * pixelRatio)}\r\n      />\r\n      <shaderPass attachArray=\"passes\" args={[CopyShader]} />\r\n    </effectComposer>\r\n  )\r\n}\r\n","import React, { useMemo, useRef } from 'react'\r\nimport { Canvas, useFrame } from 'react-three-fiber'\r\nimport { Effects } from './Effects'\r\nimport * as THREE from 'three'\r\n\r\nconst roundedSquareWave = (t, delta, a, f) => {\r\n  return ((2 * a) / Math.PI) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta)\r\n}\r\n\r\nfunction Dots() {\r\n  const ref = useRef()\r\n  const { vec, transform, positions, distances } = useMemo(() => {\r\n    const vec = new THREE.Vector3()\r\n    const transform = new THREE.Matrix4()\r\n\r\n    // Precompute randomized initial positions\r\n    const positions = [...Array(10000)].map((_, i) => {\r\n      const position = new THREE.Vector3()\r\n      // Place in a grid\r\n      position.x = (i % 100) - 50\r\n      position.y = Math.floor(i / 100) - 50\r\n\r\n      // Offset every other column (hexagonal pattern)\r\n      position.y += (i % 2) * 0.5\r\n\r\n      // Add some noise\r\n      position.x += Math.random() * 0.3\r\n      position.y += Math.random() * 0.3\r\n      return position\r\n    })\r\n\r\n    // Precompute initial distances with octagonal offset\r\n    const right = new THREE.Vector3(1, 0, 0)\r\n    const distances = positions.map((pos) => {\r\n      return pos.length() + Math.cos(pos.angleTo(right) * 8) * 0.5\r\n    })\r\n    return { vec, transform, positions, distances }\r\n  }, [])\r\n  useFrame(({ clock }) => {\r\n    for (let i = 0; i < 10000; ++i) {\r\n      const dist = distances[i]\r\n\r\n      // Distance affects the wave phase\r\n      const t = clock.elapsedTime - dist / 25\r\n\r\n      // Oscillates between -0.4 and +0.4\r\n      const wave = roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, 1 / 3.8)\r\n\r\n      // Scale initial position by our oscillator\r\n      vec.copy(positions[i]).multiplyScalar(wave + 1.3)\r\n\r\n      // Apply the Vector3 to a Matrix4\r\n      transform.setPosition(vec)\r\n\r\n      // Update Matrix4 for this instance\r\n      ref.current.setMatrixAt(i, transform)\r\n    }\r\n    ref.current.instanceMatrix.needsUpdate = true\r\n  })\r\n  return (\r\n    <instancedMesh ref={ref} args={[null, null, 10000]}>\r\n      <circleBufferGeometry args={[0.15]} />\r\n      <meshBasicMaterial />\r\n    </instancedMesh>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <Canvas orthographic camera={{ zoom: 20 }} colorManagement={false}>\r\n      <color attach=\"background\" args={['black']} />\r\n      <Effects />\r\n      <Dots />\r\n    </Canvas>\r\n  )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}